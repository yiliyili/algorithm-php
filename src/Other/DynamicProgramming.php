<?php

/**
 * 动态规划
 *
 * @author   Pu ShaoWei <marco0727@gamil.com>
 * @date     2017/8/28
 * @license  MIT
 * -------------------------------------------------------------
 * 思路分析：动态规划原理思想，max(opt(i-1,w),wi+opt(i-1,w-wi)) 当中最大值，opt(i-1,w-wi)指上一个最优解
 * -------------------------------------------------------------
 * 一个承受最大重量/容量为W的背包，现在有n个物品，每个物品重量/容量为t, 每个物品的价值为v。
 * 要使得这个背包重量/容量最大(但不能超过W),同时又需要背包的价值最大
 */

// +--------------------------------------------------------------------------
// | 解题方式    | 这儿，可能有用的解决方案
// +--------------------------------------------------------------------------

/**
 * DynamicProgramming
 *
 * @param $W  背包可装载的最大容量/重量
 * @param $goods  所有物品各自容量/重量组成数组
 * @param $val  所有物品各自价值组成的数组
 * @return mixed
 */
function DynamicProgramming($W, $goods, $val)
{
    $dp  = [];
    $N = count($goods);

    //初始化,没有物品或者一开始空间为0,那么值为0
    for ($w1 = 0; $w1 <= $W; $w1++) {
        $dp[0][$w1] = 0;
    }
    for ($n1 = 0; $n1 <= $N; $n1++) {
        $dp[$n1][0] = 0;
    }

    for ($i = 1; $i <= $N; $i++) {//选择第i个物品
        for ($j = 1; $j <= $W; $j++) {//容量为j
            if ($j - $goods[$i-1] < 0) {
                // 当前背包容量装不下，只能选择不装入背包
                $dp[$i][$j] = $dp[$i - 1][$j];
            } else {
                $dp[$i][$j] = max($dp[$i - 1][$j-$goods[$i-1]] + $val[$i-1], $dp[$i - 1][$j]);
            }
        }
    }
    // var_dump($dp);//打印查看最大值在二维数组中位置
    return $dp[$N][$W];
}

// +--------------------------------------------------------------------------
// | 方案测试    | php `this.php` || PHPStorm -> 右键 -> Run `this.php`
// +--------------------------------------------------------------------------
//故意加了一个13,打印数组看存放过程
echo DynamicProgramming(15, array (3, 4, 5, 6,13), array (8, 7, 4, 9,25));
